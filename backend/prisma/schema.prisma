// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Example data model
// ------------------ MODELS ------------------

// User model for both providers and normal users
model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  services  Service[] @relation("ProviderServices") // if provider
  bookings  Booking[] // if user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  services Service[]
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  image       Bytes?
  price       Float    @default(0)
  imageUrl    String?
  providerId  String
  provider    User     @relation("ProviderServices", fields: [providerId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  slots       Slot[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Time slots for services
model Slot {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  booking   Booking?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Booking made by users
model Booking {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  slotId    String   @unique
  slot      Slot     @relation(fields: [slotId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------ ENUMS ------------------

enum Role {
  USER
  PROVIDER
}
